diff -urN _vendor/google-orig/auth/app_engine.py _vendor/google/auth/app_engine.py
--- _vendor/google-orig/auth/app_engine.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/auth/app_engine.py	2021-05-10 20:03:18.391863624 +0000
@@ -24,9 +24,9 @@
 
 import datetime
 
-from google.auth import _helpers
-from google.auth import credentials
-from google.auth import crypt
+from artifact_registry._vendor.google.auth import _helpers
+from artifact_registry._vendor.google.auth import credentials
+from artifact_registry._vendor.google.auth import crypt
 
 # pytype: disable=import-error
 try:
@@ -39,7 +39,7 @@
 class Signer(crypt.Signer):
     """Signs messages using the App Engine App Identity service.
 
-    This can be used in place of :class:`google.auth.crypt.Signer` when
+    This can be used in place of :class:`artifact_registry._vendor.google.auth.crypt.Signer` when
     running in the App Engine standard environment.
     """
 
diff -urN _vendor/google-orig/auth/_cloud_sdk.py _vendor/google/auth/_cloud_sdk.py
--- _vendor/google-orig/auth/_cloud_sdk.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/auth/_cloud_sdk.py	2021-05-10 20:03:18.382862957 +0000
@@ -20,8 +20,8 @@
 
 import six
 
-from google.auth import environment_vars
-from google.auth import exceptions
+from artifact_registry._vendor.google.auth import environment_vars
+from artifact_registry._vendor.google.auth import exceptions
 
 
 # The ~/.config subdirectory containing gcloud credentials.
@@ -124,7 +124,7 @@
         str: The user access token.
 
     Raises:
-        google.auth.exceptions.UserAccessTokenError: if failed to get access
+        artifact_registry._vendor.google.auth.exceptions.UserAccessTokenError: if failed to get access
             token from gcloud.
     """
     if os.name == "nt":
diff -urN _vendor/google-orig/auth/compute_engine/credentials.py _vendor/google/auth/compute_engine/credentials.py
--- _vendor/google-orig/auth/compute_engine/credentials.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/auth/compute_engine/credentials.py	2021-05-10 20:03:18.396863995 +0000
@@ -23,13 +23,13 @@
 
 import six
 
-from google.auth import _helpers
-from google.auth import credentials
-from google.auth import exceptions
-from google.auth import iam
-from google.auth import jwt
-from google.auth.compute_engine import _metadata
-from google.oauth2 import _client
+from artifact_registry._vendor.google.auth import _helpers
+from artifact_registry._vendor.google.auth import credentials
+from artifact_registry._vendor.google.auth import exceptions
+from artifact_registry._vendor.google.auth import iam
+from artifact_registry._vendor.google.auth import jwt
+from artifact_registry._vendor.google.auth.compute_engine import _metadata
+from artifact_registry._vendor.google.oauth2 import _client
 
 
 class Credentials(credentials.ReadOnlyScoped, credentials.CredentialsWithQuotaProject):
@@ -44,10 +44,10 @@
 
     .. note:: Compute Engine instances can be created with scopes and therefore
         these credentials are considered to be 'scoped'. However, you can
-        not use :meth:`~google.auth.credentials.ScopedCredentials.with_scopes`
+        not use :meth:`~artifact_registry._vendor.google.auth.credentials.ScopedCredentials.with_scopes`
         because it is not possible to change the scopes that the instance
         has. Also note that
-        :meth:`~google.auth.credentials.ScopedCredentials.has_scopes` will not
+        :meth:`~artifact_registry._vendor.google.auth.credentials.ScopedCredentials.has_scopes` will not
         work until the credentials have been refreshed.
 
     .. _Compute Engine authentication documentation:
@@ -73,7 +73,7 @@
         Updates the scopes and retrieves the full service account email.
 
         Args:
-            request (google.auth.transport.Request): The object used to make
+            request (artifact_registry._vendor.google.auth.transport.Request): The object used to make
                 HTTP requests.
         """
         info = _metadata.get_service_account_info(
@@ -87,11 +87,11 @@
         """Refresh the access token and scopes.
 
         Args:
-            request (google.auth.transport.Request): The object used to make
+            request (artifact_registry._vendor.google.auth.transport.Request): The object used to make
                 HTTP requests.
 
         Raises:
-            google.auth.exceptions.RefreshError: If the Compute Engine metadata
+            artifact_registry._vendor.google.auth.exceptions.RefreshError: If the Compute Engine metadata
                 service can't be reached if if the instance has not
                 credentials.
         """
@@ -157,7 +157,7 @@
     ):
         """
         Args:
-            request (google.auth.transport.Request): The object used to make
+            request (artifact_registry._vendor.google.auth.transport.Request): The object used to make
                 HTTP requests.
             target_audience (str): The intended audience for these credentials,
                 used when requesting the ID Token. The ID Token's ``aud`` claim
@@ -168,7 +168,7 @@
             service_account_email (str): Optional explicit service account to
                 use to sign JWT tokens.
                 By default, this is the default GCE service account.
-            signer (google.auth.crypt.Signer): The signer used to sign JWTs.
+            signer (artifact_registry._vendor.google.auth.crypt.Signer): The signer used to sign JWTs.
                 In case the signer is specified, the request argument will be
                 ignored.
             use_metadata_identity_endpoint (bool): Whether to use GCE metadata
@@ -230,7 +230,7 @@
             target_audience (str): The intended audience for these credentials,
             used when requesting the ID Token.
         Returns:
-            google.auth.service_account.IDTokenCredentials: A new credentials
+            artifact_registry._vendor.google.auth.service_account.IDTokenCredentials: A new credentials
                 instance.
         """
         # since the signer is already instantiated,
@@ -311,14 +311,14 @@
         """Request ID token from metadata identity endpoint.
 
         Args:
-            request (google.auth.transport.Request): The object used to make
+            request (artifact_registry._vendor.google.auth.transport.Request): The object used to make
                 HTTP requests.
 
         Returns:
             Tuple[str, datetime.datetime]: The ID token and the expiry of the ID token.
 
         Raises:
-            google.auth.exceptions.RefreshError: If the Compute Engine metadata
+            artifact_registry._vendor.google.auth.exceptions.RefreshError: If the Compute Engine metadata
                 service can't be reached or if the instance has no credentials.
             ValueError: If extracting expiry from the obtained ID token fails.
         """
@@ -340,11 +340,11 @@
         """Refreshes the ID token.
 
         Args:
-            request (google.auth.transport.Request): The object used to make
+            request (artifact_registry._vendor.google.auth.transport.Request): The object used to make
                 HTTP requests.
 
         Raises:
-            google.auth.exceptions.RefreshError: If the credentials could
+            artifact_registry._vendor.google.auth.exceptions.RefreshError: If the credentials could
                 not be refreshed.
             ValueError: If extracting expiry from the obtained ID token fails.
         """
diff -urN _vendor/google-orig/auth/compute_engine/__init__.py _vendor/google/auth/compute_engine/__init__.py
--- _vendor/google-orig/auth/compute_engine/__init__.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/auth/compute_engine/__init__.py	2021-05-10 20:03:18.393863772 +0000
@@ -14,8 +14,8 @@
 
 """Google Compute Engine authentication."""
 
-from google.auth.compute_engine.credentials import Credentials
-from google.auth.compute_engine.credentials import IDTokenCredentials
+from artifact_registry._vendor.google.auth.compute_engine.credentials import Credentials
+from artifact_registry._vendor.google.auth.compute_engine.credentials import IDTokenCredentials
 
 
 __all__ = ["Credentials", "IDTokenCredentials"]
diff -urN _vendor/google-orig/auth/compute_engine/_metadata.py _vendor/google/auth/compute_engine/_metadata.py
--- _vendor/google-orig/auth/compute_engine/_metadata.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/auth/compute_engine/_metadata.py	2021-05-10 20:03:18.394863846 +0000
@@ -26,9 +26,9 @@
 from six.moves import http_client
 from six.moves.urllib import parse as urlparse
 
-from google.auth import _helpers
-from google.auth import environment_vars
-from google.auth import exceptions
+from artifact_registry._vendor.google.auth import _helpers
+from artifact_registry._vendor.google.auth import environment_vars
+from artifact_registry._vendor.google.auth import exceptions
 
 _LOGGER = logging.getLogger(__name__)
 
@@ -64,7 +64,7 @@
     """Checks to see if the metadata server is available.
 
     Args:
-        request (google.auth.transport.Request): A callable used to make
+        request (artifact_registry._vendor.google.auth.transport.Request): A callable used to make
             HTTP requests.
         timeout (int): How long to wait for the metadata server to respond.
         retry_count (int): How many times to attempt connecting to metadata
@@ -112,7 +112,7 @@
     """Fetch a resource from the metadata server.
 
     Args:
-        request (google.auth.transport.Request): A callable used to make
+        request (artifact_registry._vendor.google.auth.transport.Request): A callable used to make
             HTTP requests.
         path (str): The resource to retrieve. For example,
             ``'instance/service-accounts/default'``.
@@ -129,7 +129,7 @@
             returned as a string.
 
     Raises:
-        google.auth.exceptions.TransportError: if an error occurred while
+        artifact_registry._vendor.google.auth.exceptions.TransportError: if an error occurred while
             retrieving metadata.
     """
     base_url = urlparse.urljoin(root, path)
@@ -188,14 +188,14 @@
     """Get the Google Cloud Project ID from the metadata server.
 
     Args:
-        request (google.auth.transport.Request): A callable used to make
+        request (artifact_registry._vendor.google.auth.transport.Request): A callable used to make
             HTTP requests.
 
     Returns:
         str: The project ID
 
     Raises:
-        google.auth.exceptions.TransportError: if an error occurred while
+        artifact_registry._vendor.google.auth.exceptions.TransportError: if an error occurred while
             retrieving metadata.
     """
     return get(request, "project/project-id")
@@ -205,7 +205,7 @@
     """Get information about a service account from the metadata server.
 
     Args:
-        request (google.auth.transport.Request): A callable used to make
+        request (artifact_registry._vendor.google.auth.transport.Request): A callable used to make
             HTTP requests.
         service_account (str): The string 'default' or a service account email
             address. The determines which service account for which to acquire
@@ -221,7 +221,7 @@
             }
 
     Raises:
-        google.auth.exceptions.TransportError: if an error occurred while
+        artifact_registry._vendor.google.auth.exceptions.TransportError: if an error occurred while
             retrieving metadata.
     """
     return get(
@@ -235,7 +235,7 @@
     """Get the OAuth 2.0 access token for a service account.
 
     Args:
-        request (google.auth.transport.Request): A callable used to make
+        request (artifact_registry._vendor.google.auth.transport.Request): A callable used to make
             HTTP requests.
         service_account (str): The string 'default' or a service account email
             address. The determines which service account for which to acquire
@@ -245,7 +245,7 @@
         Union[str, datetime]: The access token and its expiration.
 
     Raises:
-        google.auth.exceptions.TransportError: if an error occurred while
+        artifact_registry._vendor.google.auth.exceptions.TransportError: if an error occurred while
             retrieving metadata.
     """
     token_json = get(
diff -urN _vendor/google-orig/auth/credentials.py _vendor/google/auth/credentials.py
--- _vendor/google-orig/auth/credentials.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/auth/credentials.py	2021-05-10 20:03:18.399864217 +0000
@@ -19,7 +19,7 @@
 
 import six
 
-from google.auth import _helpers
+from artifact_registry._vendor.google.auth import _helpers
 
 
 @six.add_metaclass(abc.ABCMeta)
@@ -87,11 +87,11 @@
         """Refreshes the access token.
 
         Args:
-            request (google.auth.transport.Request): The object used to make
+            request (artifact_registry._vendor.google.auth.transport.Request): The object used to make
                 HTTP requests.
 
         Raises:
-            google.auth.exceptions.RefreshError: If the credentials could
+            artifact_registry._vendor.google.auth.exceptions.RefreshError: If the credentials could
                 not be refreshed.
         """
         # pylint: disable=missing-raises-doc
@@ -119,7 +119,7 @@
         apply the token to the authentication header.
 
         Args:
-            request (google.auth.transport.Request): The object used to make
+            request (artifact_registry._vendor.google.auth.transport.Request): The object used to make
                 HTTP requests.
             method (str): The request's HTTP method or the RPC method being
                 invoked.
@@ -145,7 +145,7 @@
                 billing purposes
 
         Returns:
-            google.oauth2.credentials.Credentials: A new credentials instance.
+            artifact_registry._vendor.google.oauth2.credentials.Credentials: A new credentials instance.
         """
         raise NotImplementedError("This credential does not support quota project.")
 
@@ -297,18 +297,18 @@
 
     This helper function is useful when you do not know (or care to know) the
     specific type of credentials you are using (such as when you use
-    :func:`google.auth.default`). This function will call
+    :func:`artifact_registry._vendor.google.auth.default`). This function will call
     :meth:`Scoped.with_scopes` if the credentials are scoped credentials and if
     the credentials require scoping. Otherwise, it will return the credentials
     as-is.
 
     Args:
-        credentials (google.auth.credentials.Credentials): The credentials to
+        credentials (artifact_registry._vendor.google.auth.credentials.Credentials): The credentials to
             scope if necessary.
         scopes (Sequence[str]): The list of scopes to use.
 
     Returns:
-        google.auth.credentials.Credentials: Either a new set of scoped
+        artifact_registry._vendor.google.auth.credentials.Credentials: Either a new set of scoped
             credentials, or the passed in credentials instance if no scoping
             was required.
     """
@@ -345,7 +345,7 @@
 
     @abc.abstractproperty
     def signer(self):
-        """google.auth.crypt.Signer: The signer used to sign bytes."""
+        """artifact_registry._vendor.google.auth.crypt.Signer: The signer used to sign bytes."""
         # pylint: disable=missing-raises-doc
         # (pylint doesn't recognize that this is abstract)
         raise NotImplementedError("Signer must be implemented.")
diff -urN _vendor/google-orig/auth/crypt/base.py _vendor/google/auth/crypt/base.py
--- _vendor/google-orig/auth/crypt/base.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/auth/crypt/base.py	2021-05-10 20:03:18.406864736 +0000
@@ -83,7 +83,7 @@
             key_id (str): An optional key id used to identify the private key.
 
         Returns:
-            google.auth.crypt.Signer: The constructed signer.
+            artifact_registry._vendor.google.auth.crypt.Signer: The constructed signer.
 
         Raises:
             ValueError: If the key cannot be parsed.
@@ -100,7 +100,7 @@
                 format.
 
         Returns:
-            google.auth.crypt.Signer: The constructed signer.
+            artifact_registry._vendor.google.auth.crypt.Signer: The constructed signer.
 
         Raises:
             ValueError: If the info is not in the expected format.
@@ -123,7 +123,7 @@
             filename (str): The path to the service account .json file.
 
         Returns:
-            google.auth.crypt.Signer: The constructed signer.
+            artifact_registry._vendor.google.auth.crypt.Signer: The constructed signer.
         """
         with io.open(filename, "r", encoding="utf-8") as json_file:
             data = json.load(json_file)
diff -urN _vendor/google-orig/auth/crypt/_cryptography_rsa.py _vendor/google/auth/crypt/_cryptography_rsa.py
--- _vendor/google-orig/auth/crypt/_cryptography_rsa.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/auth/crypt/_cryptography_rsa.py	2021-05-10 20:03:18.402864440 +0000
@@ -15,7 +15,7 @@
 """RSA verifier and signer that use the ``cryptography`` library.
 
 This is a much faster implementation than the default (in
-``google.auth.crypt._python_rsa``), which depends on the pure-Python
+``artifact_registry._vendor.google.auth.crypt._python_rsa``), which depends on the pure-Python
 ``rsa`` library.
 """
 
@@ -27,8 +27,8 @@
 import cryptography.x509
 import pkg_resources
 
-from google.auth import _helpers
-from google.auth.crypt import base
+from artifact_registry._vendor.google.auth import _helpers
+from artifact_registry._vendor.google.auth.crypt import base
 
 _IMPORT_ERROR_MSG = (
     "cryptography>=1.4.0 is required to use cryptography-based RSA " "implementation."
@@ -133,7 +133,7 @@
             key_id (str): An optional key id used to identify the private key.
 
         Returns:
-            google.auth.crypt._cryptography_rsa.RSASigner: The
+            artifact_registry._vendor.google.auth.crypt._cryptography_rsa.RSASigner: The
             constructed signer.
 
         Raises:
diff -urN _vendor/google-orig/auth/crypt/es256.py _vendor/google/auth/crypt/es256.py
--- _vendor/google-orig/auth/crypt/es256.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/auth/crypt/es256.py	2021-05-10 20:03:18.408864884 +0000
@@ -27,8 +27,8 @@
 import cryptography.x509
 import pkg_resources
 
-from google.auth import _helpers
-from google.auth.crypt import base
+from artifact_registry._vendor.google.auth import _helpers
+from artifact_registry._vendor.google.auth.crypt import base
 
 _IMPORT_ERROR_MSG = (
     "cryptography>=1.4.0 is required to use cryptography-based ECDSA " "algorithms"
@@ -144,7 +144,7 @@
             key_id (str): An optional key id used to identify the private key.
 
         Returns:
-            google.auth.crypt._cryptography_rsa.RSASigner: The
+            artifact_registry._vendor.google.auth.crypt._cryptography_rsa.RSASigner: The
             constructed signer.
 
         Raises:
diff -urN _vendor/google-orig/auth/crypt/__init__.py _vendor/google/auth/crypt/__init__.py
--- _vendor/google-orig/auth/crypt/__init__.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/auth/crypt/__init__.py	2021-05-10 20:03:18.400864291 +0000
@@ -39,11 +39,11 @@
 
 import six
 
-from google.auth.crypt import base
-from google.auth.crypt import rsa
+from artifact_registry._vendor.google.auth.crypt import base
+from artifact_registry._vendor.google.auth.crypt import rsa
 
 try:
-    from google.auth.crypt import es256
+    from artifact_registry._vendor.google.auth.crypt import es256
 except ImportError:  # pragma: NO COVER
     es256 = None
 
@@ -83,7 +83,7 @@
         signature (Union[str, bytes]): The cryptographic signature to check.
         certs (Union[Sequence, str, bytes]): The certificate or certificates
             to use to check the signature.
-        verifier_cls (Optional[~google.auth.crypt.base.Signer]): Which verifier
+        verifier_cls (Optional[~artifact_registry._vendor.google.auth.crypt.base.Signer]): Which verifier
             class to use for verification. This can be used to select different
             algorithms, such as RSA or ECDSA. Default value is :class:`RSAVerifier`.
 
diff -urN _vendor/google-orig/auth/crypt/_python_rsa.py _vendor/google/auth/crypt/_python_rsa.py
--- _vendor/google-orig/auth/crypt/_python_rsa.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/auth/crypt/_python_rsa.py	2021-05-10 20:03:18.405864662 +0000
@@ -28,8 +28,8 @@
 import rsa
 import six
 
-from google.auth import _helpers
-from google.auth.crypt import base
+from artifact_registry._vendor.google.auth import _helpers
+from artifact_registry._vendor.google.auth.crypt import base
 
 _POW2 = (128, 64, 32, 16, 8, 4, 2, 1)
 _CERTIFICATE_MARKER = b"-----BEGIN CERTIFICATE-----"
@@ -144,7 +144,7 @@
             key_id (str): An optional key id used to identify the private key.
 
         Returns:
-            google.auth.crypt.Signer: The constructed signer.
+            artifact_registry._vendor.google.auth.crypt.Signer: The constructed signer.
 
         Raises:
             ValueError: If the key cannot be parsed as PKCS#1 or PKCS#8 in
diff -urN _vendor/google-orig/auth/crypt/rsa.py _vendor/google/auth/crypt/rsa.py
--- _vendor/google-orig/auth/crypt/rsa.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/auth/crypt/rsa.py	2021-05-10 20:03:18.410865033 +0000
@@ -17,14 +17,14 @@
 
 try:
     # Prefer cryptograph-based RSA implementation.
-    from google.auth.crypt import _cryptography_rsa
+    from artifact_registry._vendor.google.auth.crypt import _cryptography_rsa
 
     RSASigner = _cryptography_rsa.RSASigner
     RSAVerifier = _cryptography_rsa.RSAVerifier
 except ImportError:  # pragma: NO COVER
     # Fallback to pure-python RSA implementation if cryptography is
     # unavailable.
-    from google.auth.crypt import _python_rsa
+    from artifact_registry._vendor.google.auth.crypt import _python_rsa
 
     RSASigner = _python_rsa.RSASigner
     RSAVerifier = _python_rsa.RSAVerifier
diff -urN _vendor/google-orig/auth/_default.py _vendor/google/auth/_default.py
--- _vendor/google-orig/auth/_default.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/auth/_default.py	2021-05-10 20:03:18.384863105 +0000
@@ -25,9 +25,9 @@
 
 import six
 
-from google.auth import environment_vars
-from google.auth import exceptions
-import google.auth.transport._http_client
+from artifact_registry._vendor.google.auth import environment_vars
+from artifact_registry._vendor.google.auth import exceptions
+import artifact_registry._vendor.google.auth.transport._http_client
 
 _LOGGER = logging.getLogger(__name__)
 
@@ -63,7 +63,7 @@
     are problematic because they may not have APIs enabled and have limited
     quota. If this is the case, warn about it.
     """
-    from google.auth import _cloud_sdk
+    from artifact_registry._vendor.google.auth import _cloud_sdk
 
     if credentials.client_id == _cloud_sdk.CLOUD_SDK_CLIENT_ID:
         warnings.warn(_CLOUD_SDK_CREDENTIALS_WARNING)
@@ -84,12 +84,12 @@
                 quota and billing.
 
     Returns:
-        Tuple[google.auth.credentials.Credentials, Optional[str]]: Loaded
+        Tuple[artifact_registry._vendor.google.auth.credentials.Credentials, Optional[str]]: Loaded
             credentials and the project ID. Authorized user credentials do not
             have the project ID information.
 
     Raises:
-        google.auth.exceptions.DefaultCredentialsError: if the file is in the
+        artifact_registry._vendor.google.auth.exceptions.DefaultCredentialsError: if the file is in the
             wrong format or is missing.
     """
     if not os.path.exists(filename):
@@ -111,7 +111,7 @@
     credential_type = info.get("type")
 
     if credential_type == _AUTHORIZED_USER_TYPE:
-        from google.oauth2 import credentials
+        from artifact_registry._vendor.google.oauth2 import credentials
 
         try:
             credentials = credentials.Credentials.from_authorized_user_info(
@@ -128,7 +128,7 @@
         return credentials, None
 
     elif credential_type == _SERVICE_ACCOUNT_TYPE:
-        from google.oauth2 import service_account
+        from artifact_registry._vendor.google.oauth2 import service_account
 
         try:
             credentials = service_account.Credentials.from_service_account_info(
@@ -153,7 +153,7 @@
 
 def _get_gcloud_sdk_credentials():
     """Gets the credentials and project ID from the Cloud SDK."""
-    from google.auth import _cloud_sdk
+    from artifact_registry._vendor.google.auth import _cloud_sdk
 
     _LOGGER.debug("Checking Cloud SDK credentials as part of auth process...")
 
@@ -198,7 +198,7 @@
     # some cases where it's not available, so we tolerate ImportError.
     try:
         _LOGGER.debug("Checking for App Engine runtime as part of auth process...")
-        import google.auth.app_engine as app_engine
+        import artifact_registry._vendor.google.auth.app_engine as app_engine
     except ImportError:
         _LOGGER.warning("Import of App Engine auth library failed.")
         return None, None
@@ -224,14 +224,14 @@
     # While this library is normally bundled with compute_engine, there are
     # some cases where it's not available, so we tolerate ImportError.
     try:
-        from google.auth import compute_engine
-        from google.auth.compute_engine import _metadata
+        from artifact_registry._vendor.google.auth import compute_engine
+        from artifact_registry._vendor.google.auth.compute_engine import _metadata
     except ImportError:
         _LOGGER.warning("Import of Compute Engine auth library failed.")
         return None, None
 
     if request is None:
-        request = google.auth.transport._http_client.Request()
+        request = artifact_registry._vendor.google.auth.transport._http_client.Request()
 
     if _metadata.ping(request=request):
         # Get the project ID.
@@ -280,7 +280,7 @@
        `App Engine flexible environment`_ then the credentials and project ID
        are obtained from the `Metadata Service`_.
     5. If no credentials are found,
-       :class:`~google.auth.exceptions.DefaultCredentialsError` will be raised.
+       :class:`~artifact_registry._vendor.google.auth.exceptions.DefaultCredentialsError` will be raised.
 
     .. _Application Default Credentials: https://developers.google.com\
             /identity/protocols/application-default-credentials
@@ -296,32 +296,32 @@
 
     Example::
 
-        import google.auth
+        import artifact_registry._vendor.google.auth
 
-        credentials, project_id = google.auth.default()
+        credentials, project_id = artifact_registry._vendor.google.auth.default()
 
     Args:
         scopes (Sequence[str]): The list of scopes for the credentials. If
             specified, the credentials will automatically be scoped if
             necessary.
-        request (google.auth.transport.Request): An object used to make
+        request (artifact_registry._vendor.google.auth.transport.Request): An object used to make
             HTTP requests. This is used to detect whether the application
             is running on Compute Engine. If not specified, then it will
             use the standard library http client to make requests.
         quota_project_id (Optional[str]):  The project ID used for
             quota and billing.
     Returns:
-        Tuple[~google.auth.credentials.Credentials, Optional[str]]:
+        Tuple[~artifact_registry._vendor.google.auth.credentials.Credentials, Optional[str]]:
             the current environment's credentials and project ID. Project ID
             may be None, which indicates that the Project ID could not be
             ascertained from the environment.
 
     Raises:
-        ~google.auth.exceptions.DefaultCredentialsError:
+        ~artifact_registry._vendor.google.auth.exceptions.DefaultCredentialsError:
             If no credentials were found, or if the credentials found were
             invalid.
     """
-    from google.auth.credentials import with_scopes_if_required
+    from artifact_registry._vendor.google.auth.credentials import with_scopes_if_required
 
     explicit_project_id = os.environ.get(
         environment_vars.PROJECT, os.environ.get(environment_vars.LEGACY_PROJECT)
diff -urN _vendor/google-orig/auth/environment_vars.py _vendor/google/auth/environment_vars.py
--- _vendor/google-orig/auth/environment_vars.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/auth/environment_vars.py	2021-05-10 20:03:18.411865107 +0000
@@ -12,13 +12,13 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-"""Environment variables used by :mod:`google.auth`."""
+"""Environment variables used by :mod:`artifact_registry._vendor.google.auth`."""
 
 
 PROJECT = "GOOGLE_CLOUD_PROJECT"
 """Environment variable defining default project.
 
-This used by :func:`google.auth.default` to explicitly set a project ID. This
+This used by :func:`artifact_registry._vendor.google.auth.default` to explicitly set a project ID. This
 environment variable is also used by the Google Cloud Python Library.
 """
 
diff -urN _vendor/google-orig/auth/exceptions.py _vendor/google/auth/exceptions.py
--- _vendor/google-orig/auth/exceptions.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/auth/exceptions.py	2021-05-10 20:03:18.413865255 +0000
@@ -12,11 +12,11 @@
 # See the License for the specific language governing permissions and
 # limitations under the License.
 
-"""Exceptions used in the google.auth package."""
+"""Exceptions used in the artifact_registry._vendor.google.auth package."""
 
 
 class GoogleAuthError(Exception):
-    """Base class for all google.auth errors."""
+    """Base class for all artifact_registry._vendor.google.auth errors."""
 
 
 class TransportError(GoogleAuthError):
diff -urN _vendor/google-orig/auth/iam.py _vendor/google/auth/iam.py
--- _vendor/google-orig/auth/iam.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/auth/iam.py	2021-05-10 20:03:18.414865329 +0000
@@ -24,9 +24,9 @@
 
 from six.moves import http_client
 
-from google.auth import _helpers
-from google.auth import crypt
-from google.auth import exceptions
+from artifact_registry._vendor.google.auth import _helpers
+from artifact_registry._vendor.google.auth import crypt
+from artifact_registry._vendor.google.auth import exceptions
 
 _IAM_API_ROOT_URI = "https://iamcredentials.googleapis.com/v1"
 _SIGN_BLOB_URI = _IAM_API_ROOT_URI + "/projects/-/serviceAccounts/{}:signBlob?alt=json"
@@ -46,9 +46,9 @@
     def __init__(self, request, credentials, service_account_email):
         """
         Args:
-            request (google.auth.transport.Request): The object used to make
+            request (artifact_registry._vendor.google.auth.transport.Request): The object used to make
                 HTTP requests.
-            credentials (google.auth.credentials.Credentials): The credentials
+            credentials (artifact_registry._vendor.google.auth.credentials.Credentials): The credentials
                 that will be used to authenticate the request to the IAM API.
                 The credentials must have of one the following scopes:
 
diff -urN _vendor/google-orig/auth/impersonated_credentials.py _vendor/google/auth/impersonated_credentials.py
--- _vendor/google-orig/auth/impersonated_credentials.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/auth/impersonated_credentials.py	2021-05-10 20:03:18.416865478 +0000
@@ -33,11 +33,11 @@
 import six
 from six.moves import http_client
 
-from google.auth import _helpers
-from google.auth import credentials
-from google.auth import exceptions
-from google.auth import jwt
-from google.auth.transport.requests import AuthorizedSession
+from artifact_registry._vendor.google.auth import _helpers
+from artifact_registry._vendor.google.auth import credentials
+from artifact_registry._vendor.google.auth import exceptions
+from artifact_registry._vendor.google.auth import jwt
+from artifact_registry._vendor.google.auth.transport.requests import AuthorizedSession
 
 _DEFAULT_TOKEN_LIFETIME_SECS = 3600  # 1 hour in seconds
 
@@ -75,9 +75,9 @@
             API call.
 
     Raises:
-        google.auth.exceptions.TransportError: Raised if there is an underlying
+        artifact_registry._vendor.google.auth.exceptions.TransportError: Raised if there is an underlying
             HTTP connection error
-        google.auth.exceptions.RefreshError: Raised if the impersonated
+        artifact_registry._vendor.google.auth.exceptions.RefreshError: Raised if the impersonated
             credentials are not available.  Common reasons are
             `iamcredentials.googleapis.com` is not enabled or the
             `Service Account Token Creator` is not assigned
@@ -148,7 +148,7 @@
     Initialize a source credential which does not have access to
     list bucket::
 
-        from google.oauth2 import service_acccount
+        from artifact_registry._vendor.google.oauth2 import service_acccount
 
         target_scopes = [
             'https://www.googleapis.com/auth/devstorage.read_only']
@@ -161,7 +161,7 @@
     Now use the source credentials to acquire credentials to impersonate
     another service account::
 
-        from google.auth import impersonated_credentials
+        from artifact_registry._vendor.google.auth import impersonated_credentials
 
         target_credentials = impersonated_credentials.Credentials(
           source_credentials=source_credentials,
@@ -188,7 +188,7 @@
     ):
         """
         Args:
-            source_credentials (google.auth.Credentials): The source credential
+            source_credentials (artifact_registry._vendor.google.auth.Credentials): The source credential
                 used as to acquire the impersonated credentials.
             target_principal (str): The service account to impersonate.
             target_scopes (Sequence[str]): Scopes to request during the
@@ -236,7 +236,7 @@
         the impersonated account.
 
         Args:
-            request (google.auth.transport.requests.Request): Request object
+            request (artifact_registry._vendor.google.auth.transport.requests.Request): Request object
                 to use for refreshing credentials.
         """
 
@@ -319,7 +319,7 @@
     ):
         """
         Args:
-            target_credentials (google.auth.Credentials): The target
+            target_credentials (artifact_registry._vendor.google.auth.Credentials): The target
                 credential used as to acquire the id tokens for.
             target_audience (string): Audience to issue the token for.
             include_email (bool): Include email in IdToken
diff -urN _vendor/google-orig/auth/__init__.py _vendor/google/auth/__init__.py
--- _vendor/google-orig/auth/__init__.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/auth/__init__.py	2021-05-10 20:03:18.380862808 +0000
@@ -16,7 +16,7 @@
 
 import logging
 
-from google.auth._default import default, load_credentials_from_file
+from artifact_registry._vendor.google.auth._default import default, load_credentials_from_file
 
 
 __all__ = ["default", "load_credentials_from_file"]
diff -urN _vendor/google-orig/auth/jwt.py _vendor/google/auth/jwt.py
--- _vendor/google-orig/auth/jwt.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/auth/jwt.py	2021-05-10 20:03:18.419865700 +0000
@@ -21,8 +21,8 @@
 
 To encode a JWT use :func:`encode`::
 
-    from google.auth import crypt
-    from google.auth import jwt
+    from artifact_registry._vendor.google.auth import crypt
+    from artifact_registry._vendor.google.auth import jwt
 
     signer = crypt.Signer(private_key)
     payload = {'some': 'payload'}
@@ -53,14 +53,14 @@
 import six
 from six.moves import urllib
 
-from google.auth import _helpers
-from google.auth import _service_account_info
-from google.auth import crypt
-from google.auth import exceptions
-import google.auth.credentials
+from artifact_registry._vendor.google.auth import _helpers
+from artifact_registry._vendor.google.auth import _service_account_info
+from artifact_registry._vendor.google.auth import crypt
+from artifact_registry._vendor.google.auth import exceptions
+import artifact_registry._vendor.google.auth.credentials
 
 try:
-    from google.auth.crypt import es256
+    from artifact_registry._vendor.google.auth.crypt import es256
 except ImportError:  # pragma: NO COVER
     es256 = None
 
@@ -77,7 +77,7 @@
     """Make a signed JWT.
 
     Args:
-        signer (google.auth.crypt.Signer): The signer used to sign the JWT.
+        signer (artifact_registry._vendor.google.auth.crypt.Signer): The signer used to sign the JWT.
         payload (Mapping[str, str]): The JWT payload.
         header (Mapping[str, str]): Additional JWT header payload.
         key_id (str): The key id to add to the JWT header. If the
@@ -289,7 +289,7 @@
 
 
 class Credentials(
-    google.auth.credentials.Signing, google.auth.credentials.CredentialsWithQuotaProject
+    artifact_registry._vendor.google.auth.credentials.Signing, artifact_registry._vendor.google.auth.credentials.CredentialsWithQuotaProject
 ):
     """Credentials that use a JWT as the bearer token.
 
@@ -324,7 +324,7 @@
             additional_claims={'meta': 'data'})
 
     You can also construct the credentials directly if you have a
-    :class:`~google.auth.crypt.Signer` instance::
+    :class:`~artifact_registry._vendor.google.auth.crypt.Signer` instance::
 
         credentials = jwt.Credentials(
             signer,
@@ -352,7 +352,7 @@
     ):
         """
         Args:
-            signer (google.auth.crypt.Signer): The signer used to sign JWTs.
+            signer (artifact_registry._vendor.google.auth.crypt.Signer): The signer used to sign JWTs.
             issuer (str): The `iss` claim.
             subject (str): The `sub` claim.
             audience (str): the `aud` claim. The intended audience for the
@@ -383,12 +383,12 @@
         info.
 
         Args:
-            signer (google.auth.crypt.Signer): The signer used to sign JWTs.
+            signer (artifact_registry._vendor.google.auth.crypt.Signer): The signer used to sign JWTs.
             info (Mapping[str, str]): The service account info.
             kwargs: Additional arguments to pass to the constructor.
 
         Returns:
-            google.auth.jwt.Credentials: The constructed credentials.
+            artifact_registry._vendor.google.auth.jwt.Credentials: The constructed credentials.
 
         Raises:
             ValueError: If the info is not in the expected format.
@@ -407,7 +407,7 @@
             kwargs: Additional arguments to pass to the constructor.
 
         Returns:
-            google.auth.jwt.Credentials: The constructed credentials.
+            artifact_registry._vendor.google.auth.jwt.Credentials: The constructed credentials.
 
         Raises:
             ValueError: If the info is not in the expected format.
@@ -425,7 +425,7 @@
             kwargs: Additional arguments to pass to the constructor.
 
         Returns:
-            google.auth.jwt.Credentials: The constructed credentials.
+            artifact_registry._vendor.google.auth.jwt.Credentials: The constructed credentials.
         """
         info, signer = _service_account_info.from_filename(
             filename, require=["client_email"]
@@ -434,8 +434,8 @@
 
     @classmethod
     def from_signing_credentials(cls, credentials, audience, **kwargs):
-        """Creates a new :class:`google.auth.jwt.Credentials` instance from an
-        existing :class:`google.auth.credentials.Signing` instance.
+        """Creates a new :class:`artifact_registry._vendor.google.auth.jwt.Credentials` instance from an
+        existing :class:`artifact_registry._vendor.google.auth.credentials.Signing` instance.
 
         The new instance will use the same signer as the existing instance and
         will use the existing instance's signer email as the issuer and
@@ -451,14 +451,14 @@
                 svc_creds, audience=audience)
 
         Args:
-            credentials (google.auth.credentials.Signing): The credentials to
+            credentials (artifact_registry._vendor.google.auth.credentials.Signing): The credentials to
                 use to construct the new credentials.
             audience (str): the `aud` claim. The intended audience for the
                 credentials.
             kwargs: Additional arguments to pass to the constructor.
 
         Returns:
-            google.auth.jwt.Credentials: A new Credentials instance.
+            artifact_registry._vendor.google.auth.jwt.Credentials: A new Credentials instance.
         """
         kwargs.setdefault("issuer", credentials.signer_email)
         kwargs.setdefault("subject", credentials.signer_email)
@@ -481,7 +481,7 @@
                 additional claims.
 
         Returns:
-            google.auth.jwt.Credentials: A new credentials instance.
+            artifact_registry._vendor.google.auth.jwt.Credentials: A new credentials instance.
         """
         new_additional_claims = copy.deepcopy(self._additional_claims)
         new_additional_claims.update(additional_claims or {})
@@ -495,7 +495,7 @@
             quota_project_id=self._quota_project_id,
         )
 
-    @_helpers.copy_docstring(google.auth.credentials.CredentialsWithQuotaProject)
+    @_helpers.copy_docstring(artifact_registry._vendor.google.auth.credentials.CredentialsWithQuotaProject)
     def with_quota_project(self, quota_project_id):
         return self.__class__(
             self._signer,
@@ -540,23 +540,23 @@
         # (pylint doesn't correctly recognize overridden methods.)
         self.token, self.expiry = self._make_jwt()
 
-    @_helpers.copy_docstring(google.auth.credentials.Signing)
+    @_helpers.copy_docstring(artifact_registry._vendor.google.auth.credentials.Signing)
     def sign_bytes(self, message):
         return self._signer.sign(message)
 
     @property
-    @_helpers.copy_docstring(google.auth.credentials.Signing)
+    @_helpers.copy_docstring(artifact_registry._vendor.google.auth.credentials.Signing)
     def signer_email(self):
         return self._issuer
 
     @property
-    @_helpers.copy_docstring(google.auth.credentials.Signing)
+    @_helpers.copy_docstring(artifact_registry._vendor.google.auth.credentials.Signing)
     def signer(self):
         return self._signer
 
 
 class OnDemandCredentials(
-    google.auth.credentials.Signing, google.auth.credentials.CredentialsWithQuotaProject
+    artifact_registry._vendor.google.auth.credentials.Signing, artifact_registry._vendor.google.auth.credentials.CredentialsWithQuotaProject
 ):
     """On-demand JWT credentials.
 
@@ -587,7 +587,7 @@
     ):
         """
         Args:
-            signer (google.auth.crypt.Signer): The signer used to sign JWTs.
+            signer (artifact_registry._vendor.google.auth.crypt.Signer): The signer used to sign JWTs.
             issuer (str): The `iss` claim.
             subject (str): The `sub` claim.
             additional_claims (Mapping[str, str]): Any additional claims for
@@ -619,12 +619,12 @@
         account info.
 
         Args:
-            signer (google.auth.crypt.Signer): The signer used to sign JWTs.
+            signer (artifact_registry._vendor.google.auth.crypt.Signer): The signer used to sign JWTs.
             info (Mapping[str, str]): The service account info.
             kwargs: Additional arguments to pass to the constructor.
 
         Returns:
-            google.auth.jwt.OnDemandCredentials: The constructed credentials.
+            artifact_registry._vendor.google.auth.jwt.OnDemandCredentials: The constructed credentials.
 
         Raises:
             ValueError: If the info is not in the expected format.
@@ -643,7 +643,7 @@
             kwargs: Additional arguments to pass to the constructor.
 
         Returns:
-            google.auth.jwt.OnDemandCredentials: The constructed credentials.
+            artifact_registry._vendor.google.auth.jwt.OnDemandCredentials: The constructed credentials.
 
         Raises:
             ValueError: If the info is not in the expected format.
@@ -661,7 +661,7 @@
             kwargs: Additional arguments to pass to the constructor.
 
         Returns:
-            google.auth.jwt.OnDemandCredentials: The constructed credentials.
+            artifact_registry._vendor.google.auth.jwt.OnDemandCredentials: The constructed credentials.
         """
         info, signer = _service_account_info.from_filename(
             filename, require=["client_email"]
@@ -670,8 +670,8 @@
 
     @classmethod
     def from_signing_credentials(cls, credentials, **kwargs):
-        """Creates a new :class:`google.auth.jwt.OnDemandCredentials` instance
-        from an existing :class:`google.auth.credentials.Signing` instance.
+        """Creates a new :class:`artifact_registry._vendor.google.auth.jwt.OnDemandCredentials` instance
+        from an existing :class:`artifact_registry._vendor.google.auth.credentials.Signing` instance.
 
         The new instance will use the same signer as the existing instance and
         will use the existing instance's signer email as the issuer and
@@ -685,12 +685,12 @@
                 svc_creds)
 
         Args:
-            credentials (google.auth.credentials.Signing): The credentials to
+            credentials (artifact_registry._vendor.google.auth.credentials.Signing): The credentials to
                 use to construct the new credentials.
             kwargs: Additional arguments to pass to the constructor.
 
         Returns:
-            google.auth.jwt.Credentials: A new Credentials instance.
+            artifact_registry._vendor.google.auth.jwt.Credentials: A new Credentials instance.
         """
         kwargs.setdefault("issuer", credentials.signer_email)
         kwargs.setdefault("subject", credentials.signer_email)
@@ -709,7 +709,7 @@
                 additional claims.
 
         Returns:
-            google.auth.jwt.OnDemandCredentials: A new credentials instance.
+            artifact_registry._vendor.google.auth.jwt.OnDemandCredentials: A new credentials instance.
         """
         new_additional_claims = copy.deepcopy(self._additional_claims)
         new_additional_claims.update(additional_claims or {})
@@ -723,7 +723,7 @@
             quota_project_id=self._quota_project_id,
         )
 
-    @_helpers.copy_docstring(google.auth.credentials.CredentialsWithQuotaProject)
+    @_helpers.copy_docstring(artifact_registry._vendor.google.auth.credentials.CredentialsWithQuotaProject)
     def with_quota_project(self, quota_project_id):
 
         return self.__class__(
@@ -800,7 +800,7 @@
             request (Any): Unused.
 
         Raises:
-            google.auth.RefreshError
+            artifact_registry._vendor.google.auth.RefreshError
         """
         # pylint: disable=unused-argument
         # (pylint doesn't correctly recognize overridden methods.)
@@ -829,16 +829,16 @@
         token = self._get_jwt_for_audience(audience)
         self.apply(headers, token=token)
 
-    @_helpers.copy_docstring(google.auth.credentials.Signing)
+    @_helpers.copy_docstring(artifact_registry._vendor.google.auth.credentials.Signing)
     def sign_bytes(self, message):
         return self._signer.sign(message)
 
     @property
-    @_helpers.copy_docstring(google.auth.credentials.Signing)
+    @_helpers.copy_docstring(artifact_registry._vendor.google.auth.credentials.Signing)
     def signer_email(self):
         return self._issuer
 
     @property
-    @_helpers.copy_docstring(google.auth.credentials.Signing)
+    @_helpers.copy_docstring(artifact_registry._vendor.google.auth.credentials.Signing)
     def signer(self):
         return self._signer
diff -urN _vendor/google-orig/auth/_oauth2client.py _vendor/google/auth/_oauth2client.py
--- _vendor/google-orig/auth/_oauth2client.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/auth/_oauth2client.py	2021-05-10 20:03:18.388863401 +0000
@@ -23,11 +23,11 @@
 
 import six
 
-from google.auth import _helpers
-import google.auth.app_engine
-import google.auth.compute_engine
-import google.oauth2.credentials
-import google.oauth2.service_account
+from artifact_registry._vendor.google.auth import _helpers
+import artifact_registry._vendor.google.auth.app_engine
+import artifact_registry._vendor.google.auth.compute_engine
+import artifact_registry._vendor.google.oauth2.credentials
+import artifact_registry._vendor.google.oauth2.service_account
 
 try:
     import oauth2client.client
@@ -48,7 +48,7 @@
 
 
 def _convert_oauth2_credentials(credentials):
-    """Converts to :class:`google.oauth2.credentials.Credentials`.
+    """Converts to :class:`artifact_registry._vendor.google.oauth2.credentials.Credentials`.
 
     Args:
         credentials (Union[oauth2client.client.OAuth2Credentials,
@@ -56,9 +56,9 @@
             convert.
 
     Returns:
-        google.oauth2.credentials.Credentials: The converted credentials.
+        artifact_registry._vendor.google.oauth2.credentials.Credentials: The converted credentials.
     """
-    new_credentials = google.oauth2.credentials.Credentials(
+    new_credentials = artifact_registry._vendor.google.oauth2.credentials.Credentials(
         token=credentials.access_token,
         refresh_token=credentials.refresh_token,
         token_uri=credentials.token_uri,
@@ -73,7 +73,7 @@
 
 
 def _convert_service_account_credentials(credentials):
-    """Converts to :class:`google.oauth2.service_account.Credentials`.
+    """Converts to :class:`artifact_registry._vendor.google.oauth2.service_account.Credentials`.
 
     Args:
         credentials (Union[
@@ -82,40 +82,40 @@
             credentials to convert.
 
     Returns:
-        google.oauth2.service_account.Credentials: The converted credentials.
+        artifact_registry._vendor.google.oauth2.service_account.Credentials: The converted credentials.
     """
     info = credentials.serialization_data.copy()
     info["token_uri"] = credentials.token_uri
-    return google.oauth2.service_account.Credentials.from_service_account_info(info)
+    return artifact_registry._vendor.google.oauth2.service_account.Credentials.from_service_account_info(info)
 
 
 def _convert_gce_app_assertion_credentials(credentials):
-    """Converts to :class:`google.auth.compute_engine.Credentials`.
+    """Converts to :class:`artifact_registry._vendor.google.auth.compute_engine.Credentials`.
 
     Args:
         credentials (oauth2client.contrib.gce.AppAssertionCredentials): The
             credentials to convert.
 
     Returns:
-        google.oauth2.service_account.Credentials: The converted credentials.
+        artifact_registry._vendor.google.oauth2.service_account.Credentials: The converted credentials.
     """
-    return google.auth.compute_engine.Credentials(
+    return artifact_registry._vendor.google.auth.compute_engine.Credentials(
         service_account_email=credentials.service_account_email
     )
 
 
 def _convert_appengine_app_assertion_credentials(credentials):
-    """Converts to :class:`google.auth.app_engine.Credentials`.
+    """Converts to :class:`artifact_registry._vendor.google.auth.app_engine.Credentials`.
 
     Args:
         credentials (oauth2client.contrib.app_engine.AppAssertionCredentials):
             The credentials to convert.
 
     Returns:
-        google.oauth2.service_account.Credentials: The converted credentials.
+        artifact_registry._vendor.google.oauth2.service_account.Credentials: The converted credentials.
     """
     # pylint: disable=invalid-name
-    return google.auth.app_engine.Credentials(
+    return artifact_registry._vendor.google.auth.app_engine.Credentials(
         scopes=_helpers.string_to_scopes(credentials.scope),
         service_account_id=credentials.service_account_id,
     )
@@ -141,20 +141,20 @@
     This class converts:
 
     - :class:`oauth2client.client.OAuth2Credentials` to
-      :class:`google.oauth2.credentials.Credentials`.
+      :class:`artifact_registry._vendor.google.oauth2.credentials.Credentials`.
     - :class:`oauth2client.client.GoogleCredentials` to
-      :class:`google.oauth2.credentials.Credentials`.
+      :class:`artifact_registry._vendor.google.oauth2.credentials.Credentials`.
     - :class:`oauth2client.service_account.ServiceAccountCredentials` to
-      :class:`google.oauth2.service_account.Credentials`.
+      :class:`artifact_registry._vendor.google.oauth2.service_account.Credentials`.
     - :class:`oauth2client.service_account._JWTAccessCredentials` to
-      :class:`google.oauth2.service_account.Credentials`.
+      :class:`artifact_registry._vendor.google.oauth2.service_account.Credentials`.
     - :class:`oauth2client.contrib.gce.AppAssertionCredentials` to
-      :class:`google.auth.compute_engine.Credentials`.
+      :class:`artifact_registry._vendor.google.auth.compute_engine.Credentials`.
     - :class:`oauth2client.contrib.appengine.AppAssertionCredentials` to
-      :class:`google.auth.app_engine.Credentials`.
+      :class:`artifact_registry._vendor.google.auth.app_engine.Credentials`.
 
     Returns:
-        google.auth.credentials.Credentials: The converted credentials.
+        artifact_registry._vendor.google.auth.credentials.Credentials: The converted credentials.
 
     Raises:
         ValueError: If the credentials could not be converted.
diff -urN _vendor/google-orig/auth/_service_account_info.py _vendor/google/auth/_service_account_info.py
--- _vendor/google-orig/auth/_service_account_info.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/auth/_service_account_info.py	2021-05-10 20:03:18.389863476 +0000
@@ -19,13 +19,13 @@
 
 import six
 
-from google.auth import crypt
+from artifact_registry._vendor.google.auth import crypt
 
 
 def from_dict(data, require=None):
     """Validates a dictionary containing Google service account data.
 
-    Creates and returns a :class:`google.auth.crypt.Signer` instance from the
+    Creates and returns a :class:`artifact_registry._vendor.google.auth.crypt.Signer` instance from the
     private key specified in the data.
 
     Args:
@@ -34,7 +34,7 @@
             info.
 
     Returns:
-        google.auth.crypt.Signer: A signer created from the private key in the
+        artifact_registry._vendor.google.auth.crypt.Signer: A signer created from the private key in the
             service account file.
 
     Raises:
@@ -66,7 +66,7 @@
             info.
 
     Returns:
-        Tuple[ Mapping[str, str], google.auth.crypt.Signer ]: The verified
+        Tuple[ Mapping[str, str], artifact_registry._vendor.google.auth.crypt.Signer ]: The verified
             info and a signer instance.
     """
     with io.open(filename, "r", encoding="utf-8") as json_file:
diff -urN _vendor/google-orig/auth/transport/grpc.py _vendor/google/auth/transport/grpc.py
--- _vendor/google-orig/auth/transport/grpc.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/auth/transport/grpc.py	2021-05-10 20:03:18.426866219 +0000
@@ -21,9 +21,9 @@
 
 import six
 
-from google.auth import environment_vars
-from google.auth import exceptions
-from google.auth.transport import _mtls_helper
+from artifact_registry._vendor.google.auth import environment_vars
+from artifact_registry._vendor.google.auth import exceptions
+from artifact_registry._vendor.google.auth.transport import _mtls_helper
 
 try:
     import grpc
@@ -47,9 +47,9 @@
         http://www.grpc.io/grpc/python/grpc.html#grpc.AuthMetadataPlugin
 
     Args:
-        credentials (google.auth.credentials.Credentials): The credentials to
+        credentials (artifact_registry._vendor.google.auth.credentials.Credentials): The credentials to
             add to requests.
-        request (google.auth.transport.Request): A HTTP transport request
+        request (artifact_registry._vendor.google.auth.transport.Request): A HTTP transport request
             object used to refresh credentials as needed.
     """
 
@@ -104,19 +104,19 @@
 
     Example::
 
-        import google.auth
-        import google.auth.transport.grpc
-        import google.auth.transport.requests
+        import artifact_registry._vendor.google.auth
+        import artifact_registry._vendor.google.auth.transport.grpc
+        import artifact_registry._vendor.google.auth.transport.requests
         from google.cloud.speech.v1 import cloud_speech_pb2
 
         # Get credentials.
-        credentials, _ = google.auth.default()
+        credentials, _ = artifact_registry._vendor.google.auth.default()
 
         # Get an HTTP request function to refresh credentials.
-        request = google.auth.transport.requests.Request()
+        request = artifact_registry._vendor.google.auth.transport.requests.Request()
 
         # Create a channel.
-        channel = google.auth.transport.grpc.secure_authorized_channel(
+        channel = artifact_registry._vendor.google.auth.transport.grpc.secure_authorized_channel(
             credentials, regular_endpoint, request,
             ssl_credentials=grpc.ssl_channel_credentials())
 
@@ -138,7 +138,7 @@
 
         regular_ssl_credentials = grpc.ssl_channel_credentials()
 
-        channel = google.auth.transport.grpc.secure_authorized_channel(
+        channel = artifact_registry._vendor.google.auth.transport.grpc.secure_authorized_channel(
             credentials, regular_endpoint, request,
             ssl_credentials=regular_ssl_credentials)
 
@@ -154,7 +154,7 @@
             raise MyClientCertFailureException()
 
         try:
-            channel = google.auth.transport.grpc.secure_authorized_channel(
+            channel = artifact_registry._vendor.google.auth.transport.grpc.secure_authorized_channel(
                 credentials, mtls_endpoint, request,
                 client_cert_callback=my_client_cert_callback)
         except MyClientCertFailureException:
@@ -178,7 +178,7 @@
             endpoint_to_use = mtls_endpoint
         else:
             endpoint_to_use = regular_endpoint
-        channel = google.auth.transport.grpc.secure_authorized_channel(
+        channel = artifact_registry._vendor.google.auth.transport.grpc.secure_authorized_channel(
             credentials, endpoint_to_use, request,
             ssl_credentials=default_ssl_credentials)
 
@@ -192,20 +192,20 @@
     created channle is regular or mutual TLS. Regular endpoint ignores client
     certificate and key::
 
-        channel = google.auth.transport.grpc.secure_authorized_channel(
+        channel = artifact_registry._vendor.google.auth.transport.grpc.secure_authorized_channel(
             credentials, regular_endpoint, request)
 
     The following code uses mtls_endpoint, if the created channle is regular,
     and API mtls_endpoint is confgured to require client SSL credentials, API
     calls using this channel will be rejected::
 
-        channel = google.auth.transport.grpc.secure_authorized_channel(
+        channel = artifact_registry._vendor.google.auth.transport.grpc.secure_authorized_channel(
             credentials, mtls_endpoint, request)
 
     Args:
-        credentials (google.auth.credentials.Credentials): The credentials to
+        credentials (artifact_registry._vendor.google.auth.credentials.Credentials): The credentials to
             add to requests.
-        request (google.auth.transport.Request): A HTTP transport request
+        request (artifact_registry._vendor.google.auth.transport.Request): A HTTP transport request
             object used to refresh credentials as needed. Even though gRPC
             is a separate transport, there's no way to refresh the credentials
             without using a standard http transport.
@@ -230,7 +230,7 @@
         grpc.Channel: The created gRPC channel.
 
     Raises:
-        google.auth.exceptions.MutualTLSChannelError: If mutual TLS channel
+        artifact_registry._vendor.google.auth.exceptions.MutualTLSChannelError: If mutual TLS channel
             creation failed for any reason.
     """
     # Create the metadata plugin for inserting the authorization header.
@@ -311,7 +311,7 @@
             grpc.ChannelCredentials: The created grpc channel credentials.
 
         Raises:
-            google.auth.exceptions.MutualTLSChannelError: If mutual TLS channel
+            artifact_registry._vendor.google.auth.exceptions.MutualTLSChannelError: If mutual TLS channel
                 creation failed for any reason.
         """
         if self._is_mtls:
diff -urN _vendor/google-orig/auth/transport/_http_client.py _vendor/google/auth/transport/_http_client.py
--- _vendor/google-orig/auth/transport/_http_client.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/auth/transport/_http_client.py	2021-05-10 20:03:18.422865922 +0000
@@ -21,8 +21,8 @@
 from six.moves import http_client
 from six.moves import urllib
 
-from google.auth import exceptions
-from google.auth import transport
+from artifact_registry._vendor.google.auth import exceptions
+from artifact_registry._vendor.google.auth import transport
 
 _LOGGER = logging.getLogger(__name__)
 
@@ -76,7 +76,7 @@
             Response: The HTTP response.
 
         Raises:
-            google.auth.exceptions.TransportError: If any exception occurred.
+            artifact_registry._vendor.google.auth.exceptions.TransportError: If any exception occurred.
         """
         # socket._GLOBAL_DEFAULT_TIMEOUT is the default in http.client.
         if timeout is None:
diff -urN _vendor/google-orig/auth/transport/__init__.py _vendor/google/auth/transport/__init__.py
--- _vendor/google-orig/auth/transport/__init__.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/auth/transport/__init__.py	2021-05-10 20:03:18.421865848 +0000
@@ -14,13 +14,13 @@
 
 """Transport - HTTP client library support.
 
-:mod:`google.auth` is designed to work with various HTTP client libraries such
+:mod:`artifact_registry._vendor.google.auth` is designed to work with various HTTP client libraries such
 as urllib3 and requests. In order to work across these libraries with different
 interfaces some abstraction is needed.
 
 This module provides two interfaces that are implemented by transport adapters
 to support HTTP libraries. :class:`Request` defines the interface expected by
-:mod:`google.auth` to make requests. :class:`Response` defines the interface
+:mod:`artifact_registry._vendor.google.auth` to make requests. :class:`Response` defines the interface
 for the return value of :class:`Request`.
 """
 
@@ -90,7 +90,7 @@
             Response: The HTTP response.
 
         Raises:
-            google.auth.exceptions.TransportError: If any exception occurred.
+            artifact_registry._vendor.google.auth.exceptions.TransportError: If any exception occurred.
         """
         # pylint: disable=redundant-returns-doc, missing-raises-doc
         # (pylint doesn't play well with abstract docstrings.)
diff -urN _vendor/google-orig/auth/transport/_mtls_helper.py _vendor/google/auth/transport/_mtls_helper.py
--- _vendor/google-orig/auth/transport/_mtls_helper.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/auth/transport/_mtls_helper.py	2021-05-10 20:03:18.424866071 +0000
@@ -22,7 +22,7 @@
 
 import six
 
-from google.auth import exceptions
+from artifact_registry._vendor.google.auth import exceptions
 
 CONTEXT_AWARE_METADATA_PATH = "~/.secureConnect/context_aware_metadata.json"
 _CERT_PROVIDER_COMMAND = "cert_provider_command"
@@ -75,7 +75,7 @@
         Dict[str, str]: The metadata.
 
     Raises:
-        google.auth.exceptions.ClientCertError: If failed to parse metadata as JSON.
+        artifact_registry._vendor.google.auth.exceptions.ClientCertError: If failed to parse metadata as JSON.
     """
     try:
         with open(metadata_path) as f:
@@ -100,7 +100,7 @@
             bytes in PEM format and passphrase bytes.
 
     Raises:
-        google.auth.exceptions.ClientCertError: if problems occurs when running
+        artifact_registry._vendor.google.auth.exceptions.ClientCertError: if problems occurs when running
             the cert provider command or generating cert, key and passphrase.
     """
     try:
@@ -155,7 +155,7 @@
             cert bytes and key bytes both in PEM format, and passphrase bytes.
 
     Raises:
-        google.auth.exceptions.ClientCertError: if problems occurs when getting
+        artifact_registry._vendor.google.auth.exceptions.ClientCertError: if problems occurs when getting
             the cert, key and passphrase.
     """
     metadata_path = _check_dca_metadata_path(CONTEXT_AWARE_METADATA_PATH)
@@ -197,7 +197,7 @@
             and key bytes both in PEM format.
 
     Raises:
-        google.auth.exceptions.ClientCertError: if problems occurs when getting
+        artifact_registry._vendor.google.auth.exceptions.ClientCertError: if problems occurs when getting
             the cert and key.
     """
     if client_cert_callback:
@@ -218,7 +218,7 @@
     protected private key and passphrase, you can convert it to a client cert
     callback function accepted by google-auth::
 
-        from google.auth.transport import _mtls_helper
+        from artifact_registry._vendor.google.auth.transport import _mtls_helper
 
         def your_client_cert_function():
             return cert, encrypted_key, passphrase
diff -urN _vendor/google-orig/auth/transport/mtls.py _vendor/google/auth/transport/mtls.py
--- _vendor/google-orig/auth/transport/mtls.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/auth/transport/mtls.py	2021-05-10 20:03:18.428866367 +0000
@@ -16,8 +16,8 @@
 
 import six
 
-from google.auth import exceptions
-from google.auth.transport import _mtls_helper
+from artifact_registry._vendor.google.auth import exceptions
+from artifact_registry._vendor.google.auth.transport import _mtls_helper
 
 
 def has_default_client_cert_source():
@@ -40,7 +40,7 @@
             client certificate bytes and private key bytes, both in PEM format.
 
     Raises:
-        google.auth.exceptions.DefaultClientCertSourceError: If the default
+        artifact_registry._vendor.google.auth.exceptions.DefaultClientCertSourceError: If the default
             client SSL credentials don't exist or are malformed.
     """
     if not has_default_client_cert_source():
@@ -76,7 +76,7 @@
             returns the cert_path, key_path and passphrase bytes.
 
     Raises:
-        google.auth.exceptions.DefaultClientCertSourceError: If any problem
+        artifact_registry._vendor.google.auth.exceptions.DefaultClientCertSourceError: If any problem
             occurs when loading or saving the client certificate and key.
     """
     if not has_default_client_cert_source():
diff -urN _vendor/google-orig/auth/transport/requests.py _vendor/google/auth/transport/requests.py
--- _vendor/google-orig/auth/transport/requests.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/auth/transport/requests.py	2021-05-10 20:03:18.430866516 +0000
@@ -41,10 +41,10 @@
 )  # pylint: disable=ungrouped-imports
 import six  # pylint: disable=ungrouped-imports
 
-from google.auth import environment_vars
-from google.auth import exceptions
-from google.auth import transport
-import google.auth.transport._mtls_helper
+from artifact_registry._vendor.google.auth import environment_vars
+from artifact_registry._vendor.google.auth import exceptions
+from artifact_registry._vendor.google.auth import transport
+import artifact_registry._vendor.google.auth.transport._mtls_helper
 
 _LOGGER = logging.getLogger(__name__)
 
@@ -126,12 +126,12 @@
     to construct or use this class directly.
 
     This class can be useful if you want to manually refresh a
-    :class:`~google.auth.credentials.Credentials` instance::
+    :class:`~artifact_registry._vendor.google.auth.credentials.Credentials` instance::
 
-        import google.auth.transport.requests
+        import artifact_registry._vendor.google.auth.transport.requests
         import requests
 
-        request = google.auth.transport.requests.Request()
+        request = artifact_registry._vendor.google.auth.transport.requests.Request()
 
         credentials.refresh(request)
 
@@ -172,10 +172,10 @@
                 requests :meth:`~requests.Session.request` method.
 
         Returns:
-            google.auth.transport.Response: The HTTP response.
+            artifact_registry._vendor.google.auth.transport.Response: The HTTP response.
 
         Raises:
-            google.auth.exceptions.TransportError: If any exception occurred.
+            artifact_registry._vendor.google.auth.exceptions.TransportError: If any exception occurred.
         """
         try:
             _LOGGER.debug("Making request: %s %s", method, url)
@@ -240,7 +240,7 @@
     This class is used to perform requests to API endpoints that require
     authorization::
 
-        from google.auth.transport.requests import AuthorizedSession
+        from artifact_registry._vendor.google.auth.transport.requests import AuthorizedSession
 
         authed_session = AuthorizedSession(credentials)
 
@@ -298,7 +298,7 @@
             # handle exceptions.
 
     Args:
-        credentials (google.auth.credentials.Credentials): The credentials to
+        credentials (artifact_registry._vendor.google.auth.credentials.Credentials): The credentials to
             add to the request.
         refresh_status_codes (Sequence[int]): Which HTTP status codes indicate
             that credentials should be refreshed and the request should be
@@ -307,11 +307,11 @@
             refresh the credentials and retry the request.
         refresh_timeout (Optional[int]): The timeout value in seconds for
             credential refresh HTTP requests.
-        auth_request (google.auth.transport.requests.Request):
+        auth_request (artifact_registry._vendor.google.auth.transport.requests.Request):
             (Optional) An instance of
-            :class:`~google.auth.transport.requests.Request` used when
+            :class:`~artifact_registry._vendor.google.auth.transport.requests.Request` used when
             refreshing credentials. If not passed,
-            an instance of :class:`~google.auth.transport.requests.Request`
+            an instance of :class:`~artifact_registry._vendor.google.auth.transport.requests.Request`
             is created.
     """
 
@@ -364,7 +364,7 @@
                 will be used.
 
         Raises:
-            google.auth.exceptions.MutualTLSChannelError: If mutual TLS channel
+            artifact_registry._vendor.google.auth.exceptions.MutualTLSChannelError: If mutual TLS channel
                 creation failed for any reason.
         """
         use_client_cert = os.getenv(
@@ -385,7 +385,7 @@
                 self._is_mtls,
                 cert,
                 key,
-            ) = google.auth.transport._mtls_helper.get_client_cert_and_key(
+            ) = artifact_registry._vendor.google.auth.transport._mtls_helper.get_client_cert_and_key(
                 client_cert_callback
             )
 
diff -urN _vendor/google-orig/auth/transport/urllib3.py _vendor/google/auth/transport/urllib3.py
--- _vendor/google-orig/auth/transport/urllib3.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/auth/transport/urllib3.py	2021-05-10 20:03:18.432866664 +0000
@@ -46,9 +46,9 @@
 import six
 import urllib3.exceptions  # pylint: disable=ungrouped-imports
 
-from google.auth import environment_vars
-from google.auth import exceptions
-from google.auth import transport
+from artifact_registry._vendor.google.auth import environment_vars
+from artifact_registry._vendor.google.auth import exceptions
+from artifact_registry._vendor.google.auth import transport
 
 _LOGGER = logging.getLogger(__name__)
 
@@ -84,13 +84,13 @@
     to construct or use this class directly.
 
     This class can be useful if you want to manually refresh a
-    :class:`~google.auth.credentials.Credentials` instance::
+    :class:`~artifact_registry._vendor.google.auth.credentials.Credentials` instance::
 
-        import google.auth.transport.urllib3
+        import artifact_registry._vendor.google.auth.transport.urllib3
         import urllib3
 
         http = urllib3.PoolManager()
-        request = google.auth.transport.urllib3.Request(http)
+        request = artifact_registry._vendor.google.auth.transport.urllib3.Request(http)
 
         credentials.refresh(request)
 
@@ -123,10 +123,10 @@
                 urllib3 :meth:`urlopen` method.
 
         Returns:
-            google.auth.transport.Response: The HTTP response.
+            artifact_registry._vendor.google.auth.transport.Response: The HTTP response.
 
         Raises:
-            google.auth.exceptions.TransportError: If any exception occurred.
+            artifact_registry._vendor.google.auth.exceptions.TransportError: If any exception occurred.
         """
         # urllib3 uses a sentinel default value for timeout, so only set it if
         # specified.
@@ -190,7 +190,7 @@
     This class is used to perform requests to API endpoints that require
     authorization::
 
-        from google.auth.transport.urllib3 import AuthorizedHttp
+        from artifact_registry._vendor.google.auth.transport.urllib3 import AuthorizedHttp
 
         authed_http = AuthorizedHttp(credentials)
 
@@ -251,7 +251,7 @@
             # handle exceptions.
 
     Args:
-        credentials (google.auth.credentials.Credentials): The credentials to
+        credentials (artifact_registry._vendor.google.auth.credentials.Credentials): The credentials to
             add to the request.
         http (urllib3.PoolManager): The underlying HTTP object to
             use to make requests. If not specified, a
@@ -308,7 +308,7 @@
             True if the channel is mutual TLS and False otherwise.
 
         Raises:
-            google.auth.exceptions.MutualTLSChannelError: If mutual TLS channel
+            artifact_registry._vendor.google.auth.exceptions.MutualTLSChannelError: If mutual TLS channel
                 creation failed for any reason.
         """
         use_client_cert = os.getenv(
diff -urN _vendor/google-orig/oauth2/_client.py _vendor/google/oauth2/_client.py
--- _vendor/google-orig/oauth2/_client.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/oauth2/_client.py	2021-05-10 20:03:18.435866886 +0000
@@ -30,9 +30,9 @@
 from six.moves import http_client
 from six.moves import urllib
 
-from google.auth import _helpers
-from google.auth import exceptions
-from google.auth import jwt
+from artifact_registry._vendor.google.auth import _helpers
+from artifact_registry._vendor.google.auth import exceptions
+from artifact_registry._vendor.google.auth import jwt
 
 _URLENCODED_CONTENT_TYPE = "application/x-www-form-urlencoded"
 _JWT_GRANT_TYPE = "urn:ietf:params:oauth:grant-type:jwt-bearer"
@@ -46,7 +46,7 @@
         response_body (str): The decoded response data.
 
     Raises:
-        google.auth.exceptions.RefreshError
+        artifact_registry._vendor.google.auth.exceptions.RefreshError
     """
     try:
         error_data = json.loads(response_body)
@@ -82,7 +82,7 @@
     """Makes a request to the OAuth 2.0 authorization server's token endpoint.
 
     Args:
-        request (google.auth.transport.Request): A callable used to make
+        request (artifact_registry._vendor.google.auth.transport.Request): A callable used to make
             HTTP requests.
         token_uri (str): The OAuth 2.0 authorizations server's token endpoint
             URI.
@@ -92,7 +92,7 @@
         Mapping[str, str]: The JSON-decoded response data.
 
     Raises:
-        google.auth.exceptions.RefreshError: If the token endpoint returned
+        artifact_registry._vendor.google.auth.exceptions.RefreshError: If the token endpoint returned
             an error.
     """
     body = urllib.parse.urlencode(body).encode("utf-8")
@@ -132,7 +132,7 @@
     For more details, see `rfc7523 section 4`_.
 
     Args:
-        request (google.auth.transport.Request): A callable used to make
+        request (artifact_registry._vendor.google.auth.transport.Request): A callable used to make
             HTTP requests.
         token_uri (str): The OAuth 2.0 authorizations server's token endpoint
             URI.
@@ -143,7 +143,7 @@
             expiration, and additional data returned by the token endpoint.
 
     Raises:
-        google.auth.exceptions.RefreshError: If the token endpoint returned
+        artifact_registry._vendor.google.auth.exceptions.RefreshError: If the token endpoint returned
             an error.
 
     .. _rfc7523 section 4: https://tools.ietf.org/html/rfc7523#section-4
@@ -172,7 +172,7 @@
     that require ID Tokens instead of access tokens or JWT bearer tokens.
 
     Args:
-        request (google.auth.transport.Request): A callable used to make
+        request (artifact_registry._vendor.google.auth.transport.Request): A callable used to make
             HTTP requests.
         token_uri (str): The OAuth 2.0 authorization server's token endpoint
             URI.
@@ -185,7 +185,7 @@
             data returned by the endpoint.
 
     Raises:
-        google.auth.exceptions.RefreshError: If the token endpoint returned
+        artifact_registry._vendor.google.auth.exceptions.RefreshError: If the token endpoint returned
             an error.
     """
     body = {"assertion": assertion, "grant_type": _JWT_GRANT_TYPE}
@@ -212,7 +212,7 @@
     For more details, see `rfc678 section 6`_.
 
     Args:
-        request (google.auth.transport.Request): A callable used to make
+        request (artifact_registry._vendor.google.auth.transport.Request): A callable used to make
             HTTP requests.
         token_uri (str): The OAuth 2.0 authorizations server's token endpoint
             URI.
@@ -231,7 +231,7 @@
             returned by the token endpoint.
 
     Raises:
-        google.auth.exceptions.RefreshError: If the token endpoint returned
+        artifact_registry._vendor.google.auth.exceptions.RefreshError: If the token endpoint returned
             an error.
 
     .. _rfc6748 section 6: https://tools.ietf.org/html/rfc6749#section-6
diff -urN _vendor/google-orig/oauth2/credentials.py _vendor/google/oauth2/credentials.py
--- _vendor/google-orig/oauth2/credentials.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/oauth2/credentials.py	2021-05-10 20:03:18.438867109 +0000
@@ -36,11 +36,11 @@
 
 import six
 
-from google.auth import _cloud_sdk
-from google.auth import _helpers
-from google.auth import credentials
-from google.auth import exceptions
-from google.oauth2 import _client
+from artifact_registry._vendor.google.auth import _cloud_sdk
+from artifact_registry._vendor.google.auth import _helpers
+from artifact_registry._vendor.google.auth import credentials
+from artifact_registry._vendor.google.auth import exceptions
+from artifact_registry._vendor.google.oauth2 import _client
 
 
 # The Google OAuth 2.0 token endpoint. Used for authorized user credentials.
@@ -141,7 +141,7 @@
         Depending on the authorization server and the scopes requested, this
         may be populated when credentials are obtained and updated when
         :meth:`refresh` is called. This token is a JWT. It can be verified
-        and decoded using :func:`google.oauth2.id_token.verify_oauth2_token`.
+        and decoded using :func:`artifact_registry._vendor.google.oauth2.id_token.verify_oauth2_token`.
         """
         return self._id_token
 
@@ -226,7 +226,7 @@
                 credentials.
 
         Returns:
-            google.oauth2.credentials.Credentials: The constructed
+            artifact_registry._vendor.google.oauth2.credentials.Credentials: The constructed
                 credentials.
 
         Raises:
@@ -263,7 +263,7 @@
                 credentials.
 
         Returns:
-            google.oauth2.credentials.Credentials: The constructed
+            artifact_registry._vendor.google.oauth2.credentials.Credentials: The constructed
                 credentials.
 
         Raises:
@@ -331,7 +331,7 @@
             account (str): Account to get the access token for.
 
         Returns:
-            google.oauth2.credentials.UserAccessTokenCredentials: The created
+            artifact_registry._vendor.google.oauth2.credentials.UserAccessTokenCredentials: The created
                 credentials with the given account.
         """
         return self.__class__(account=account, quota_project_id=self._quota_project_id)
@@ -344,12 +344,12 @@
         """Refreshes the access token.
 
         Args:
-            request (google.auth.transport.Request): This argument is required
+            request (artifact_registry._vendor.google.auth.transport.Request): This argument is required
                 by the base class interface but not used in this implementation,
                 so just set it to `None`.
 
         Raises:
-            google.auth.exceptions.UserAccessTokenError: If the access token
+            artifact_registry._vendor.google.auth.exceptions.UserAccessTokenError: If the access token
                 refresh failed.
         """
         self.token = _cloud_sdk.get_auth_access_token(self._account)
diff -urN _vendor/google-orig/oauth2/id_token.py _vendor/google/oauth2/id_token.py
--- _vendor/google-orig/oauth2/id_token.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/oauth2/id_token.py	2021-05-10 20:03:18.440867257 +0000
@@ -25,8 +25,8 @@
 
 Example::
 
-    from google.oauth2 import id_token
-    from google.auth.transport import requests
+    from artifact_registry._vendor.google.oauth2 import id_token
+    from artifact_registry._vendor.google.auth.transport import requests
 
     request = requests.Request()
 
@@ -43,15 +43,15 @@
 day), you may wish to take advantage of caching to reduce latency and the
 potential for network errors. This can be accomplished using an external
 library like `CacheControl`_ to create a cache-aware
-:class:`google.auth.transport.Request`::
+:class:`artifact_registry._vendor.google.auth.transport.Request`::
 
     import cachecontrol
-    import google.auth.transport.requests
+    import artifact_registry._vendor.google.auth.transport.requests
     import requests
 
     session = requests.session()
     cached_session = cachecontrol.CacheControl(session)
-    request = google.auth.transport.requests.Request(session=cached_session)
+    request = artifact_registry._vendor.google.auth.transport.requests.Request(session=cached_session)
 
 .. _OpenID Connect ID Token:
     http://openid.net/specs/openid-connect-core-1_0.html#IDToken
@@ -64,9 +64,9 @@
 import six
 from six.moves import http_client
 
-from google.auth import environment_vars
-from google.auth import exceptions
-from google.auth import jwt
+from artifact_registry._vendor.google.auth import environment_vars
+from artifact_registry._vendor.google.auth import exceptions
+from artifact_registry._vendor.google.auth import jwt
 
 
 # The URL that provides public certificates for verifying ID tokens issued
@@ -90,7 +90,7 @@
     ``{'key id': 'x509 certificate'}``.
 
     Args:
-        request (google.auth.transport.Request): The object used to make
+        request (artifact_registry._vendor.google.auth.transport.Request): The object used to make
             HTTP requests.
         certs_url (str): The certificate endpoint URL.
 
@@ -113,7 +113,7 @@
 
     Args:
         id_token (Union[str, bytes]): The encoded token.
-        request (google.auth.transport.Request): The object used to make
+        request (artifact_registry._vendor.google.auth.transport.Request): The object used to make
             HTTP requests.
         audience (str): The audience that this token is intended for. If None
             then the audience is not verified.
@@ -134,7 +134,7 @@
 
     Args:
         id_token (Union[str, bytes]): The encoded token.
-        request (google.auth.transport.Request): The object used to make
+        request (artifact_registry._vendor.google.auth.transport.Request): The object used to make
             HTTP requests.
         audience (str): The audience that this token is intended for. This is
             typically your application's OAuth 2.0 client ID. If None then the
@@ -165,7 +165,7 @@
 
     Args:
         id_token (Union[str, bytes]): The encoded token.
-        request (google.auth.transport.Request): The object used to make
+        request (artifact_registry._vendor.google.auth.transport.Request): The object used to make
             HTTP requests.
         audience (str): The audience that this token is intended for. This is
             typically your Firebase application ID. If None then the audience
@@ -190,21 +190,21 @@
        to the path of a valid service account JSON file, then ID token is
        acquired using this service account credentials.
     3. If metadata server doesn't exist and no valid service account credentials
-       are found, :class:`~google.auth.exceptions.DefaultCredentialsError` will
+       are found, :class:`~artifact_registry._vendor.google.auth.exceptions.DefaultCredentialsError` will
        be raised.
 
     Example::
 
-        import google.oauth2.id_token
-        import google.auth.transport.requests
+        import artifact_registry._vendor.google.oauth2.id_token
+        import artifact_registry._vendor.google.auth.transport.requests
 
-        request = google.auth.transport.requests.Request()
+        request = artifact_registry._vendor.google.auth.transport.requests.Request()
         target_audience = "https://pubsub.googleapis.com"
 
-        id_token = google.oauth2.id_token.fetch_id_token(request, target_audience)
+        id_token = artifact_registry._vendor.google.oauth2.id_token.fetch_id_token(request, target_audience)
 
     Args:
-        request (google.auth.transport.Request): A callable used to make
+        request (artifact_registry._vendor.google.auth.transport.Request): A callable used to make
             HTTP requests.
         audience (str): The audience that this ID token is intended for.
 
@@ -212,14 +212,14 @@
         str: The ID token.
 
     Raises:
-        ~google.auth.exceptions.DefaultCredentialsError:
+        ~artifact_registry._vendor.google.auth.exceptions.DefaultCredentialsError:
             If metadata server doesn't exist and no valid service account
             credentials are found.
     """
     # 1. First try to fetch ID token from metada server if it exists. The code
     # works for GAE and Cloud Run metadata server as well.
     try:
-        from google.auth import compute_engine
+        from artifact_registry._vendor.google.auth import compute_engine
 
         credentials = compute_engine.IDTokenCredentials(
             request, audience, use_metadata_identity_endpoint=True
@@ -250,7 +250,7 @@
                 (info.get("type") == "service_account") and info or None
             )
 
-            from google.oauth2 import service_account
+            from artifact_registry._vendor.google.oauth2 import service_account
 
             credentials = service_account.IDTokenCredentials.from_service_account_info(
                 credentials_content, target_audience=audience
diff -urN _vendor/google-orig/oauth2/service_account.py _vendor/google/oauth2/service_account.py
--- _vendor/google-orig/oauth2/service_account.py	2020-09-16 00:48:45.000000000 +0000
+++ _vendor/google/oauth2/service_account.py	2021-05-10 20:03:18.442867405 +0000
@@ -46,7 +46,7 @@
 step is required. The use of the private key allows this profile to assert
 identity directly.
 
-This profile also differs from the :mod:`google.auth.jwt` authentication
+This profile also differs from the :mod:`artifact_registry._vendor.google.auth.jwt` authentication
 because the JWT credentials use the JWT directly as the bearer token. This
 profile instead only uses the JWT to obtain an OAuth 2.0 access token. The
 obtained OAuth 2.0 access token is used as the bearer token.
@@ -73,11 +73,11 @@
 import copy
 import datetime
 
-from google.auth import _helpers
-from google.auth import _service_account_info
-from google.auth import credentials
-from google.auth import jwt
-from google.oauth2 import _client
+from artifact_registry._vendor.google.auth import _helpers
+from artifact_registry._vendor.google.auth import _service_account_info
+from artifact_registry._vendor.google.auth import credentials
+from artifact_registry._vendor.google.auth import jwt
+from artifact_registry._vendor.google.oauth2 import _client
 
 _DEFAULT_TOKEN_LIFETIME_SECS = 3600  # 1 hour in seconds
 
@@ -133,7 +133,7 @@
     ):
         """
         Args:
-            signer (google.auth.crypt.Signer): The signer used to sign JWTs.
+            signer (artifact_registry._vendor.google.auth.crypt.Signer): The signer used to sign JWTs.
             service_account_email (str): The service account's email.
             scopes (Sequence[str]): Scopes to request during the authorization
                 grant.
@@ -173,12 +173,12 @@
         info.
 
         Args:
-            signer (google.auth.crypt.Signer): The signer used to sign JWTs.
+            signer (artifact_registry._vendor.google.auth.crypt.Signer): The signer used to sign JWTs.
             info (Mapping[str, str]): The service account info.
             kwargs: Additional arguments to pass to the constructor.
 
         Returns:
-            google.auth.jwt.Credentials: The constructed credentials.
+            artifact_registry._vendor.google.auth.jwt.Credentials: The constructed credentials.
 
         Raises:
             ValueError: If the info is not in the expected format.
@@ -201,7 +201,7 @@
             kwargs: Additional arguments to pass to the constructor.
 
         Returns:
-            google.auth.service_account.Credentials: The constructed
+            artifact_registry._vendor.google.auth.service_account.Credentials: The constructed
                 credentials.
 
         Raises:
@@ -221,7 +221,7 @@
             kwargs: Additional arguments to pass to the constructor.
 
         Returns:
-            google.auth.service_account.Credentials: The constructed
+            artifact_registry._vendor.google.auth.service_account.Credentials: The constructed
                 credentials.
         """
         info, signer = _service_account_info.from_filename(
@@ -268,7 +268,7 @@
             subject (str): The subject claim.
 
         Returns:
-            google.auth.service_account.Credentials: A new credentials
+            artifact_registry._vendor.google.auth.service_account.Credentials: A new credentials
                 instance.
         """
         return self.__class__(
@@ -291,7 +291,7 @@
                 additional claims.
 
         Returns:
-            google.auth.service_account.Credentials: A new credentials
+            artifact_registry._vendor.google.auth.service_account.Credentials: A new credentials
                 instance.
         """
         new_additional_claims = copy.deepcopy(self._additional_claims)
@@ -430,7 +430,7 @@
     ):
         """
         Args:
-            signer (google.auth.crypt.Signer): The signer used to sign JWTs.
+            signer (artifact_registry._vendor.google.auth.crypt.Signer): The signer used to sign JWTs.
             service_account_email (str): The service account's email.
             token_uri (str): The OAuth 2.0 Token URI.
             target_audience (str): The intended audience for these credentials,
@@ -462,12 +462,12 @@
         info.
 
         Args:
-            signer (google.auth.crypt.Signer): The signer used to sign JWTs.
+            signer (artifact_registry._vendor.google.auth.crypt.Signer): The signer used to sign JWTs.
             info (Mapping[str, str]): The service account info.
             kwargs: Additional arguments to pass to the constructor.
 
         Returns:
-            google.auth.jwt.IDTokenCredentials: The constructed credentials.
+            artifact_registry._vendor.google.auth.jwt.IDTokenCredentials: The constructed credentials.
 
         Raises:
             ValueError: If the info is not in the expected format.
@@ -486,7 +486,7 @@
             kwargs: Additional arguments to pass to the constructor.
 
         Returns:
-            google.auth.service_account.IDTokenCredentials: The constructed
+            artifact_registry._vendor.google.auth.service_account.IDTokenCredentials: The constructed
                 credentials.
 
         Raises:
@@ -506,7 +506,7 @@
             kwargs: Additional arguments to pass to the constructor.
 
         Returns:
-            google.auth.service_account.IDTokenCredentials: The constructed
+            artifact_registry._vendor.google.auth.service_account.IDTokenCredentials: The constructed
                 credentials.
         """
         info, signer = _service_account_info.from_filename(
@@ -523,7 +523,7 @@
             used when requesting the ID Token.
 
         Returns:
-            google.auth.service_account.IDTokenCredentials: A new credentials
+            artifact_registry._vendor.google.auth.service_account.IDTokenCredentials: A new credentials
                 instance.
         """
         return self.__class__(
